<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuhsuanzhang.him.imserver.mapper.IMMessageMapper">
  <resultMap id="BaseResultMap" type="com.yuhsuanzhang.him.imcommon.entity.IMMessage">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="sender_id" jdbcType="BIGINT" property="senderId" />
    <result column="receiver_id" jdbcType="BIGINT" property="receiverId" />
    <result column="previous_message_id" jdbcType="BIGINT" property="previousMessageId" />
    <result column="receiver_type" jdbcType="TINYINT" property="receiverType" />
    <result column="message_type" jdbcType="TINYINT" property="messageType" />
    <result column="send_time" jdbcType="TIMESTAMP" property="sendTime" />
    <result column="device_type" jdbcType="TINYINT" property="deviceType" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="version" jdbcType="INTEGER" property="version" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, content, sender_id, receiver_id, previous_message_id, receiver_type, message_type, 
    send_time, device_type, create_time, update_time, version
  </sql>
  <select id="selectByExample" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from im_message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from im_message
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from im_message
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessageExample">
    delete from im_message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessage">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into im_message (content, sender_id, receiver_id, 
      previous_message_id, receiver_type, message_type, 
      send_time, device_type, create_time, 
      update_time, version)
    values (#{content,jdbcType=VARCHAR}, #{senderId,jdbcType=BIGINT}, #{receiverId,jdbcType=BIGINT}, 
      #{previousMessageId,jdbcType=BIGINT}, #{receiverType,jdbcType=TINYINT}, #{messageType,jdbcType=TINYINT}, 
      #{sendTime,jdbcType=TIMESTAMP}, #{deviceType,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessage">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into im_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="content != null">
        content,
      </if>
      <if test="senderId != null">
        sender_id,
      </if>
      <if test="receiverId != null">
        receiver_id,
      </if>
      <if test="previousMessageId != null">
        previous_message_id,
      </if>
      <if test="receiverType != null">
        receiver_type,
      </if>
      <if test="messageType != null">
        message_type,
      </if>
      <if test="sendTime != null">
        send_time,
      </if>
      <if test="deviceType != null">
        device_type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="version != null">
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="senderId != null">
        #{senderId,jdbcType=BIGINT},
      </if>
      <if test="receiverId != null">
        #{receiverId,jdbcType=BIGINT},
      </if>
      <if test="previousMessageId != null">
        #{previousMessageId,jdbcType=BIGINT},
      </if>
      <if test="receiverType != null">
        #{receiverType,jdbcType=TINYINT},
      </if>
      <if test="messageType != null">
        #{messageType,jdbcType=TINYINT},
      </if>
      <if test="sendTime != null">
        #{sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deviceType != null">
        #{deviceType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessageExample" resultType="java.lang.Long">
    select count(*) from im_message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update im_message
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.senderId != null">
        sender_id = #{record.senderId,jdbcType=BIGINT},
      </if>
      <if test="record.receiverId != null">
        receiver_id = #{record.receiverId,jdbcType=BIGINT},
      </if>
      <if test="record.previousMessageId != null">
        previous_message_id = #{record.previousMessageId,jdbcType=BIGINT},
      </if>
      <if test="record.receiverType != null">
        receiver_type = #{record.receiverType,jdbcType=TINYINT},
      </if>
      <if test="record.messageType != null">
        message_type = #{record.messageType,jdbcType=TINYINT},
      </if>
      <if test="record.sendTime != null">
        send_time = #{record.sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deviceType != null">
        device_type = #{record.deviceType,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update im_message
    set id = #{record.id,jdbcType=BIGINT},
      content = #{record.content,jdbcType=VARCHAR},
      sender_id = #{record.senderId,jdbcType=BIGINT},
      receiver_id = #{record.receiverId,jdbcType=BIGINT},
      previous_message_id = #{record.previousMessageId,jdbcType=BIGINT},
      receiver_type = #{record.receiverType,jdbcType=TINYINT},
      message_type = #{record.messageType,jdbcType=TINYINT},
      send_time = #{record.sendTime,jdbcType=TIMESTAMP},
      device_type = #{record.deviceType,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessage">
    update im_message
    <set>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="senderId != null">
        sender_id = #{senderId,jdbcType=BIGINT},
      </if>
      <if test="receiverId != null">
        receiver_id = #{receiverId,jdbcType=BIGINT},
      </if>
      <if test="previousMessageId != null">
        previous_message_id = #{previousMessageId,jdbcType=BIGINT},
      </if>
      <if test="receiverType != null">
        receiver_type = #{receiverType,jdbcType=TINYINT},
      </if>
      <if test="messageType != null">
        message_type = #{messageType,jdbcType=TINYINT},
      </if>
      <if test="sendTime != null">
        send_time = #{sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deviceType != null">
        device_type = #{deviceType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yuhsuanzhang.him.imcommon.entity.IMMessage">
    update im_message
    set content = #{content,jdbcType=VARCHAR},
      sender_id = #{senderId,jdbcType=BIGINT},
      receiver_id = #{receiverId,jdbcType=BIGINT},
      previous_message_id = #{previousMessageId,jdbcType=BIGINT},
      receiver_type = #{receiverType,jdbcType=TINYINT},
      message_type = #{messageType,jdbcType=TINYINT},
      send_time = #{sendTime,jdbcType=TIMESTAMP},
      device_type = #{deviceType,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>